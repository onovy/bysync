#!/bin/bash

GLOBAL_CONFIG="$HOME/.bysync/_global.conf"
CONFIG="$1"

function Run {
    CMD="$1"

    if [ -n "$CMD" ] ; then
        LogDebug "RUN: $CMD"
        eval "$CMD"
        return $?
    fi

    return 0
}

function LogDebug {
    MSG=$1

    if [ "$DEBUG" = "yes" ] ; then
        >&2 echo "$1"
    fi
}

function Log {
    MSG=$1

    >&2 echo [$(date "+%F %T")] "$1"
}

function DoRsync {
    Run "$EXEC_PRE_SYNC"

    date "+%s" >"$SRC$STAMP_NAME"

    Run "rsync $RSYNC_OPTS_BOTH $RSYNC_OPTS_BOTH_USR $RSYNC_OPTS_SRC \"$SRC\" \"$DST\""
    if [ $? != 0 ] ; then
        Log "rsync $SRC -> $DST failed"
        Run "$EXEC_FAIL_SYNC"
        return 1
    fi

    Run "rsync $RSYNC_OPTS_BOTH $RSYNC_OPTS_BOTH_USR $RSYNC_OPTS_DST \"$DST\" \"$SRC\""
    if [ $? != 0 ] ; then
        Log "rsync $DST -> $SRC failed"
        Run "$EXEC_FAIL_SYNC"
        return 1
    fi

    Run "$EXEC_POST_SYNC"

    return 0
}

function NeedCmd {
    if ! type -p "$1" > /dev/null ; then
        Log "$1 command not found"
        exit 1
    fi
}

function CheckEnv {
    NeedCmd "inotifywait"
    NeedCmd "rsync"
}

function LoadConfig {
    source "$GLOBAL_CONFIG"

    if [ -z "$CONFIG" ] ; then
        Log "bysync <config>"
        exit 1
    fi

    if [ ! -f "$CONFIG" ] ; then
        Log "Config file $CONFIG not found!"
        exit 1
    fi

    source "$CONFIG"

    if [[ $SRC != */ ]] ; then
        Log "SRC must end with /"
        exit 1
    fi
    if [[ $DST != */ ]] ; then
        Log "DST must end with /"
        exit 1
    fi
}

CheckEnv
LoadConfig
Log "Starting"
while [ 1 ] ; do
    DoRsync
    if [ $? != 0 ] ; then
        sleep $SLEEP_AFTER_ERROR
        continue
    fi
    while read line ; do
        DoRsync
        if [ $? != 0 ] ; then
            sleep $SLEEP_AFTER_ERROR
            break
        fi
    done < <(Run "timeout \"$TIMEOUT\" inotifywait -r -e create,delete,modify,move,attrib --exclude \"^$SRC$STAMP_REGEXP$\" \"$SRC\"")
    Run $EXEC_TIMEOUT_SYNC
done
